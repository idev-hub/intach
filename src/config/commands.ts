import {Keyboard} from "vk-io";
import {randomInt} from "../utils/random";
import Luxon from "../classes/Luxon";
import {getTable} from "../classes/Timetable";
import {getAttachmentDayWeek} from "../utils/getAttachmentDayWeek";
import {templates} from "./templates";
import {keyboards} from "./keyboards";
import {peer} from "../services/peer";
import genKeyboard from "../utils/genKeyboard";
import isLogin from "../middlewares/hearer/isLogin";
import Language from "../classes/Language";
import getUser = peer.getUser;
import {Bot} from "../classes/Bot";
import {getAdmins} from "../services/admin";
import isOutbox from "../middlewares/hearer/isOutbox";

export default ((app: Bot) => {
    app.hear("test", ["/test"], [
        async (context, next) => {
            await context.send("message one")
            return next()
        },
        async (context, next) => {
            return context.send({
                message: "test",
                template: JSON.stringify({
                    type: "carousel",
                    elements: [
                        {
                            title: "–ö–∞–º–µ–Ω—å.–ù–æ–∂–Ω–∏—Ü—ã.–ë—É–º–∞–≥–∞",
                            description: "–°–º–æ–∂–µ—à—å –ø–æ–±–µ–¥–∏—Ç—å –≤–µ–ª–∏–∫–∏–π —Ä–∞–Ω–¥–æ–º?",
                            photo_id: "-109837093_457242809",
                            buttons: [{
                                action: {
                                    type: "text",
                                    label: "–ò–≥—Ä–∞—Ç—å",
                                    payload: {
                                        command: "game"
                                    }
                                }
                            }]
                        }
                    ]
                }),
            })
        }
    ])

    /**
     * –ö–æ–º–∞–Ω–¥–∞ –í–´–ó–û–í–ê –†–ï–ö–õ–ê–ú–´
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–µ–∫–ª–∞–º—É
     * @beta
     **/
    app.hear("ads", ["/ads"], [
        async (context) => {
            const {lang} = context
            return context.reply({
                message: lang["ads"],
                attachment: "photo-147858640_457239306",
                keyboard: Keyboard.builder().urlButton({
                    label: lang["button"]["see"],
                    url: "https://vk.cc/aAOc4w"
                }).inline()
            })
        }
    ])

    /**
     * –ö–æ–º–∞–Ω–¥–∞ –í–û–ó–í–†–ê–¢–ê –ù–ê–ó–ê–î
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
     * @beta
     **/
    app.hear("main", ["–Ω–∞–∑–∞–¥", "–≤–µ—Ä–Ω—É—Ç—Å—è"], [
        isLogin,
        async (context) => {
            const {lang} = context
            context.setActivity()
            return context.reply({
                message: lang["actual"],
                keyboard: keyboards.mainKeyboard(context)
            })
        }
    ])

    /**
     * –ö–æ–º–∞–Ω–¥–∞ –ù–ê–ß–ê–¢–¨
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @beta
     **/
    app.hear("start", [new RegExp(/(\s+)?(–Ω–∞—á–∞—Ç—å|start)/i)], [
        (context) => context.scene.enter("start-scene")
    ])

    /**
     * –ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞ –°–ï–ì–û–î–ù–Ø.
     * @beta
     **/
    app.hear("today", [new RegExp(/(\s+)?(—Å–µ–≥–æ–¥–Ω—è)/i)], [
        isLogin,
        async (context) => {
            const {lang} = context
            const date = new Luxon('Asia/Yekaterinburg')

            await context.setActivity()
            return context.send({
                message: await templates.tableTemplate(context, date),
                attachment: getAttachmentDayWeek(date.week()),
                keyboard: Keyboard.builder()
                    .textButton({
                        label: lang["button"]["tomorrow"],
                        payload: {
                            command: "tomorrow"
                        },
                        color: Keyboard.POSITIVE_COLOR
                    }).textButton({
                        label: lang["button"]["after_tomorrow"],
                        payload: {
                            command: "after_tomorrow"
                        },
                        color: Keyboard.NEGATIVE_COLOR
                    })
                    .inline()
            })
        }
    ])

    /**
     * –ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –ó–ê–í–¢–†–ê.
     * @beta
     **/
    app.hear("tomorrow", [new RegExp(/(\s+)?(–∑–∞–≤—Ç—Ä–∞)/i)], [
        isLogin,
        async (context) => {
            const {lang} = context
            const date = new Luxon('Asia/Yekaterinburg').add(24)
            const keyboards = [
                !context.isChat ? Keyboard.textButton({
                    label: lang["button"]["today"],
                    payload: {command: "today"},
                    color: Keyboard.PRIMARY_COLOR
                }) : undefined,
                Keyboard.textButton({
                    label: lang["button"]["after_tomorrow"],
                    payload: {command: "after_tomorrow"},
                    color: Keyboard.NEGATIVE_COLOR
                })
            ]

            await context.setActivity()
            return context.send({
                message: await templates.tableTemplate(context, date),
                attachment: getAttachmentDayWeek(date.week()),
                keyboard: genKeyboard(2, keyboards).inline()
            })
        }
    ])

    /**
     * –ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞.
     * @beta
     **/
    app.hear("after_tomorrow", [new RegExp(/(\s+)?(–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞)/i)], [
        isLogin,
        async (context) => {
            const {lang} = context
            const date = new Luxon('Asia/Yekaterinburg').add(48)
            const keyboards = [
                !context.isChat ? Keyboard.textButton({
                    label: lang["button"]["today"],
                    payload: {command: "today"},
                    color: Keyboard.PRIMARY_COLOR
                }) : undefined,
                Keyboard.textButton({
                    label: lang["button"]["tomorrow"],
                    payload: {command: "tomorrow"},
                    color: Keyboard.POSITIVE_COLOR
                })
            ]

            await context.setActivity()
            return context.send({
                message: await templates.tableTemplate(context, date),
                attachment: getAttachmentDayWeek(date.week()),
                keyboard: genKeyboard(2, keyboards).inline()
            })
        }
    ])

    /**
     * –ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –ù–ï–î–ï–õ–Æ.
     * @beta
     **/
    app.hear("week", [new RegExp(/(\s+)?(–Ω–∞ –Ω–µ–¥–µ–ª—é)/i)], [
        isLogin,
        async (context) => {
            const {lang} = context
            let time = 0

            await context.send(lang["timetable"]["start"])
            await context.setActivity()

            for (let i = 0; i < 7; i++) {
                const date = new Luxon().add(time)

                if (date.week() !== 7) {
                    const data = await getTable(context.user.peer.param, date)
                    if (data["count"] > 0) {

                        let template = `üìÖ ${date.pin()}, ${context.user.peer.param.toUpperCase()}\n\n`
                        template += templates.disciplineTemplate(context, data)

                        await context.send({
                            message: template,
                            attachment: getAttachmentDayWeek(date.week()),
                        })
                    }
                }
                time += 24
            }

            return context.send(lang["timetable"]["end"])
        }
    ])

    /**
     * –ö–æ–º–∞–Ω–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏.
     * @beta
     **/
    app.hear("subscribe-news", ["–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏"], [
        isLogin,
        async (context) => {
            const {lang} = context

            await context.setActivity()
            await peer.setSubscribe(context, true)
            return context.reply({
                message: lang["newsletter"]["subscribed"],
                keyboard: keyboards.mainKeyboard(context)
            })
        }
    ])

    /**
     * –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π.
     * @beta
     **/
    app.hear("unsubscribe-news", ["–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π"], [
        isLogin,
        async (context) => {
            const {lang} = context

            await context.setActivity()
            await peer.setSubscribe(context, false)
            return context.reply({
                message: lang["newsletter"]["unsubscribed"],
                keyboard: keyboards.mainKeyboard(context)
            })
        }
    ])

    /**
     * –ö–æ–º–∞–Ω–¥–∞ –≤—ã–∑–æ–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
     * @beta
     **/
    app.hear("call_admins", ["–í—ã–∑–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—é"], [
        async (context) => {
            await context.setActivity()

            const {lang} = context
            const admins = await getAdmins(this)
            if (admins) {
                await app.api.messages.send({
                    user_ids: admins.map(i => i["id"]),
                    random_id: randomInt(0, 31),
                    message: `@id${context.peerId} - –≤—ã–∑–≤–∞–ª –∞–¥–º–∏–Ω–∞.`,
                    keyboard: Keyboard.builder().urlButton({
                        label: "–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç",
                        url: `https://vk.com/gim${process.env.GROUP_ID}?sel=${context.peerId}`
                    }).inline()
                })
                return context.reply(lang["call_admins"]["caused"])
            } else {
                return context.reply(lang["call_admins"]["error"])
            }
        }
    ])

    /**
     * –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—á–∏—Ö –∫–æ–º–∞–Ω–¥
     * @beta
     **/
    app.hear("other", [new RegExp(/(\s+)?(–ø—Ä–æ—á–µ–µ|–¥—Ä—É–≥–æ–µ)/i)], [
        isLogin,
        (context) => {
            const {lang} = context

            context.setActivity()
            return context.send({
                message: lang.other(context),
                keyboard: keyboards.otherKeyboard(context)
            })
        }
    ])

    /**
     * –ö–æ–º–∞–Ω–¥–∞ –∫–∞–º–µ–Ω—å –Ω–æ–∂–Ω–∏—Ü—ã –±—É–º–∞–≥–∞
     * @beta
     **/
    app.hear("game", [new RegExp(/(\s+)?(–∏–≥—Ä–∞—Ç—å)/i)], [
        (context) => context.scene.enter("rock-paper-scissors")
    ])

    /**
     * –ö–æ–º–∞–Ω–¥–∞ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
     * @beta
     **/
    app.hear("language_switch", ["—Å–º–µ–Ω–∏—Ç—å —è–∑—ã–∫"], [
        isLogin,
        (context) => {
            context.setActivity()
            return context.send({
                message: "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫",
                keyboard: keyboards.languageKeyboard(context)
            })
        }
    ])

    const languages = new Language().languages
    for (let i = 0; i < languages.length; i++) {
        const lang = Object.keys(languages[i])[0]
        app.hear("lang" + lang, [], [
            async (context) => {
                const user = await getUser(context)
                if (user) {
                    const used = user.toJSON()["lang"]
                    user.update({lang: lang}).then(() => {
                        context.lang = new Language(lang).template()
                        return context.send({
                            message: `–í—ã —Å–º–µ–Ω–∏–ª–∏ —è–∑—ã–∫ —Å ${used.toUpperCase()} –Ω–∞ ${lang.toUpperCase()}`,
                            keyboard: keyboards.mainKeyboard(context)
                        })
                    })
                }
            }
        ])
    }

    /**
     * –ö–æ–º–∞–Ω–¥–∞ —Å–º–µ–Ω—ã –≥—Ä—É–ø–ø—ã
     * @beta
     **/
    app.hear("rename", [new RegExp(/^(!group+\s)(.*)/i)], [
        isOutbox,
        async (context) => {
            if (context.$match[2])
                await app.api.messages.delete({
                    peer_id: context.peerId,
                    delete_for_all: true,
                    message_ids: context.id
                })

            let user = await peer.getUser(context)
            await peer.setUser(context, context.$match[2])
            if(!user){
                await peer.setSubscribe(context, true)
            }

            context.lang = new Language("ru").template()
            return context.send({
                message: (user)?`–í–∞–º –∏–∑–º–µ–Ω–∏–ª–∏ –≥—Ä—É–ø–ø—É —Å ${user.get("param")} –Ω–∞ ${context.$match[2]}`:`–í–∞–º –ø—Ä–∏—Å–≤–æ–∏–ª–∏ –≥—Ä—É–ø–ø—É ${context.$match[2]}`,
                keyboard: keyboards.mainKeyboard(context)
            })
        }
    ])
})
